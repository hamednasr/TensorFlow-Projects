{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyPCNENGTU+043jjBTkDiwJc",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/hamednasr/TensorFlow-Projects/blob/main/potato_disease_classification.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Deep Learning Model to Detect Potato Diseases\n",
        "### according to 1000 images of \"Early blight\" and 1000 images of \"late blight\" and 152 images of \"healthy\" potatoes, a deep learning model is created and trained then deployed."
      ],
      "metadata": {
        "id": "jffQJ9VwUn9f"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rlyejKsZFvZA"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "import tensorflow_datasets as tfds\n",
        "from tensorflow.keras import mixed_precision\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from IPython import display\n",
        "display.set_matplotlib_formats('svg')\n",
        "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay , accuracy_score, classification_report"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Otswx_4oTMyp",
        "outputId": "6f2fc1f9-ac88-46a8-8342-5b81b6c56083"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!nvidia-smi"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7z-1dORdBWQT",
        "outputId": "7a8e847a-c80e-4068-c2d5-4c86b7634cec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Wed Sep 21 08:03:53 2022       \n",
            "+-----------------------------------------------------------------------------+\n",
            "| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n",
            "|-------------------------------+----------------------+----------------------+\n",
            "| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n",
            "| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n",
            "|                               |                      |               MIG M. |\n",
            "|===============================+======================+======================|\n",
            "|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n",
            "| N/A   59C    P8    12W /  70W |      0MiB / 15109MiB |      0%      Default |\n",
            "|                               |                      |                  N/A |\n",
            "+-------------------------------+----------------------+----------------------+\n",
            "                                                                               \n",
            "+-----------------------------------------------------------------------------+\n",
            "| Processes:                                                                  |\n",
            "|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n",
            "|        ID   ID                                                   Usage      |\n",
            "|=============================================================================|\n",
            "|  No running processes found                                                 |\n",
            "+-----------------------------------------------------------------------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mixed_precision.set_global_policy('mixed_float16')\n",
        "mixed_precision.global_policy()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xNxjJ_2HBiRj",
        "outputId": "37150c2d-93b9-4654-e575-6bcffcb882f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Policy \"mixed_float16\">"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Create Image Dataset:"
      ],
      "metadata": {
        "id": "2pLasy1va0IZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "potato_ds = tf.keras.preprocessing.image_dataset_from_directory('/content/drive/MyDrive/Colab Notebooks/Computer Vision/potato disease/data',\n",
        "                                                    labels='inferred',\n",
        "                                                    label_mode='int',\n",
        "                                                    batch_size=32,\n",
        "                                                    image_size=(256, 256),\n",
        "                                                    shuffle=True)"
      ],
      "metadata": {
        "id": "zH8z3K95HBUw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "109c7da3-7881-4a17-8f13-afaace02a4c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 2152 files belonging to 3 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "classes = potato_ds.class_names\n",
        "classes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EmqK_afoTPg0",
        "outputId": "c014f25f-9e2a-455b-b326-9aedd439cf79"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Early_blight', 'Late_blight', 'healthy']"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(potato_ds)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t_0bZRf7c42o",
        "outputId": "2149a166-d298-47b4-937b-ca4f52ce8395"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "68"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for images, labels in potato_ds.take(1):\n",
        "  print(images.shape)\n",
        "  print(labels)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yokGUQ0pTPeG",
        "outputId": "c7bad45f-db1d-44bf-f195-12345c8d32af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(32, 256, 256, 3)\n",
            "tf.Tensor([1 0 1 0 2 1 1 0 1 0 1 1 0 0 1 0 0 2 0 2 1 1 1 1 0 1 1 1 1 0 0 0], shape=(32,), dtype=int32)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Visualizing Images:"
      ],
      "metadata": {
        "id": "Aj6u7HhMa5y7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig , axs = plt.subplots(3,3,figsize=(10,10))\n",
        "\n",
        "for  i, ax in enumerate(axs.flatten()):\n",
        "  ax.imshow(images[i]/255)\n",
        "  itemname = classes[labels[i]]\n",
        "  ax.text(50, -3, itemname, fontsize=16 ,backgroundcolor='yellow')\n",
        "  ax.set_xticks([])\n",
        "  ax.set_yticks([]);"
      ],
      "metadata": {
        "id": "BADRvH4XWYfp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Train, Val, Test Split:"
      ],
      "metadata": {
        "id": "aG5n4L6i7Fll"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def train_val_test_split(ds, train_split=0.8, val_split=0.1, test_split=0.1, shuffle=True, shuffle_size=10000):\n",
        "    assert (train_split + test_split + val_split) == 1\n",
        "    ds_size = len(ds)\n",
        "    if shuffle:\n",
        "        # Specify seed to always have the same split distribution between runs\n",
        "        ds = ds.shuffle(shuffle_size, seed=12)\n",
        "    \n",
        "    train_size = int(train_split * ds_size)\n",
        "    val_size = int(val_split * ds_size)\n",
        "    \n",
        "    train_ds = ds.take(train_size)    \n",
        "    val_ds = ds.skip(train_size).take(val_size)\n",
        "    test_ds = ds.skip(train_size).skip(val_size)\n",
        "    \n",
        "    return train_ds, val_ds, test_ds"
      ],
      "metadata": {
        "id": "Pz0wMblV7Jzy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_ds, val_ds, test_ds = train_val_test_split(potato_ds)"
      ],
      "metadata": {
        "id": "wJ5IBKKK7SVK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_ds = train_ds.shuffle(200).prefetch(tf.data.AUTOTUNE).cache()\n",
        "val_ds = val_ds.shuffle(200).prefetch(tf.data.AUTOTUNE).cache()\n",
        "test_ds = test_ds.shuffle(200).prefetch(tf.data.AUTOTUNE).cache()"
      ],
      "metadata": {
        "id": "uClgAUNk7jUU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_ds"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2IFi5L4H8UUC",
        "outputId": "755ffbd2-fea5-4112-cbcc-db893d69dc60"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<CacheDataset element_spec=(TensorSpec(shape=(None, 256, 256, 3), dtype=tf.float32, name=None), TensorSpec(shape=(None,), dtype=tf.int32, name=None))>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(train_ds),len(val_ds),len(test_ds)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oQBCsh4fG23x",
        "outputId": "c716025f-3c86-49f0-86c9-49ec7486bc48"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(54, 6, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for images, labels in test_ds:\n",
        "  print(images.shape)\n",
        "  print(labels)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ovk2BMLfHDwM",
        "outputId": "f438edb9-c39b-4ad7-c65f-a3447d900830"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(32, 256, 256, 3)\n",
            "tf.Tensor([0 1 1 1 1 0 0 1 2 1 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 1 0 0 1 0 0 1], shape=(32,), dtype=int32)\n",
            "(32, 256, 256, 3)\n",
            "tf.Tensor([1 1 1 1 1 0 0 1 1 1 0 1 0 0 0 0 1 1 2 1 0 2 2 1 0 1 1 0 0 0 1 1], shape=(32,), dtype=int32)\n",
            "(32, 256, 256, 3)\n",
            "tf.Tensor([1 1 0 0 0 0 0 0 0 0 1 0 1 1 0 1 0 1 0 2 0 1 0 0 1 2 0 2 0 0 0 0], shape=(32,), dtype=int32)\n",
            "(32, 256, 256, 3)\n",
            "tf.Tensor([0 1 0 1 1 0 1 2 0 0 0 0 1 1 1 0 0 1 1 0 0 2 0 1 0 0 1 0 0 1 1 0], shape=(32,), dtype=int32)\n",
            "(32, 256, 256, 3)\n",
            "tf.Tensor([1 1 1 2 1 1 1 0 0 1 1 1 0 1 1 1 1 0 0 1 1 0 1 0 0 0 1 1 1 1 1 2], shape=(32,), dtype=int32)\n",
            "(32, 256, 256, 3)\n",
            "tf.Tensor([1 0 1 1 1 0 1 0 1 0 0 0 1 1 0 0 0 0 1 0 0 1 1 1 2 1 0 0 1 1 0 0], shape=(32,), dtype=int32)\n",
            "(32, 256, 256, 3)\n",
            "tf.Tensor([0 0 1 0 0 0 0 2 0 0 0 1 1 0 1 0 1 0 1 2 1 1 1 0 2 0 1 1 0 1 1 0], shape=(32,), dtype=int32)\n",
            "(32, 256, 256, 3)\n",
            "tf.Tensor([1 0 2 1 1 0 0 1 1 0 0 0 2 1 1 0 0 2 0 0 0 0 1 0 0 1 1 0 0 0 1 1], shape=(32,), dtype=int32)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Augmentation:"
      ],
      "metadata": {
        "id": "FWDoLj0p8cbx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_augmentation = tf.keras.Sequential([\n",
        "                    tf.keras.layers.Resizing(256,256),\n",
        "                    tf.keras.layers.RandomFlip(mode=\"horizontal_and_vertical\"),\n",
        "                    tf.keras.layers.RandomRotation(0.1),\n",
        "                    tf.keras.layers.RandomZoom(0.1),\n",
        "                    tf.keras.layers.RandomContrast(0.1)],\n",
        "                    name =\"data_augmentation\"\n",
        "                    )"
      ],
      "metadata": {
        "id": "T_ZOyIFj8XN5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Create Model:"
      ],
      "metadata": {
        "id": "4wRAVRO7_22X"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "base_model = tf.keras.applications.EfficientNetB0(include_top=False , pooling='max')\n",
        "base_model.trainable = False\n",
        "\n",
        "inputs = tf.keras.Input(shape=(256,256,3), name='input_layer')\n",
        "\n",
        "x = data_augmentation(inputs)\n",
        "x = base_model(x, training = False)\n",
        "\n",
        "x = tf.keras.layers.Dense(32 , activation ='relu')(x)\n",
        "x = tf.keras.layers.Dense(3)(x)\n",
        "\n",
        "outputs = tf.keras.layers.Activation('softmax', dtype = tf.float32)(x)\n",
        "\n",
        "model = tf.keras.Model(inputs, outputs)\n",
        "\n",
        "model.compile(loss = tf.keras.losses.SparseCategoricalCrossentropy(),\n",
        "              optimizer = tf .keras. optimizers.Adam(),\n",
        "              metrics = ['accuracy'])"
      ],
      "metadata": {
        "id": "oBIJ7sJj-rVW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KSZ2K57CCpec",
        "outputId": "e0b60138-c2a2-4fa4-b73c-db049de10422"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model_10\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " input_layer (InputLayer)    [(None, 256, 256, 3)]     0         \n",
            "                                                                 \n",
            " data_augmentation (Sequenti  (None, 256, 256, 3)      0         \n",
            " al)                                                             \n",
            "                                                                 \n",
            " efficientnetb0 (Functional)  (None, 1280)             4049571   \n",
            "                                                                 \n",
            " dense_20 (Dense)            (None, 32)                40992     \n",
            "                                                                 \n",
            " dense_21 (Dense)            (None, 3)                 99        \n",
            "                                                                 \n",
            " activation_10 (Activation)  (None, 3)                 0         \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 4,090,662\n",
            "Trainable params: 41,091\n",
            "Non-trainable params: 4,049,571\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for layer in model.layers:\n",
        "  print(layer.name, layer.dtype , layer.dtype_policy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D0Kz1V7NCvfS",
        "outputId": "488760a1-e7aa-4b74-f46c-5dac9d474038"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "input_layer float32 <Policy \"float32\">\n",
            "data_augmentation float32 <Policy \"mixed_float16\">\n",
            "efficientnetb0 float32 <Policy \"mixed_float16\">\n",
            "dense_20 float32 <Policy \"mixed_float16\">\n",
            "dense_21 float32 <Policy \"mixed_float16\">\n",
            "activation_10 float32 <Policy \"float32\">\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Train Model:"
      ],
      "metadata": {
        "id": "9JT0sg0zEcYN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(train_ds, epochs=20, validation_data=val_ds)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZeBj5EOmC2qQ",
        "outputId": "2b1480c5-c5ed-4b5a-9c1e-b9f8c773357e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "54/54 [==============================] - 11s 91ms/step - loss: 1.0367 - accuracy: 0.7176 - val_loss: 0.2296 - val_accuracy: 0.9167\n",
            "Epoch 2/20\n",
            "54/54 [==============================] - 3s 65ms/step - loss: 0.2329 - accuracy: 0.9109 - val_loss: 0.1499 - val_accuracy: 0.9375\n",
            "Epoch 3/20\n",
            "54/54 [==============================] - 3s 65ms/step - loss: 0.1677 - accuracy: 0.9358 - val_loss: 0.1782 - val_accuracy: 0.9323\n",
            "Epoch 4/20\n",
            "54/54 [==============================] - 4s 65ms/step - loss: 0.1458 - accuracy: 0.9485 - val_loss: 0.0794 - val_accuracy: 0.9740\n",
            "Epoch 5/20\n",
            "54/54 [==============================] - 4s 66ms/step - loss: 0.1158 - accuracy: 0.9606 - val_loss: 0.0490 - val_accuracy: 0.9844\n",
            "Epoch 6/20\n",
            "54/54 [==============================] - 4s 65ms/step - loss: 0.1030 - accuracy: 0.9635 - val_loss: 0.0541 - val_accuracy: 0.9844\n",
            "Epoch 7/20\n",
            "54/54 [==============================] - 4s 65ms/step - loss: 0.0730 - accuracy: 0.9740 - val_loss: 0.0510 - val_accuracy: 0.9844\n",
            "Epoch 8/20\n",
            "54/54 [==============================] - 3s 65ms/step - loss: 0.0587 - accuracy: 0.9815 - val_loss: 0.0453 - val_accuracy: 0.9844\n",
            "Epoch 9/20\n",
            "54/54 [==============================] - 3s 65ms/step - loss: 0.0522 - accuracy: 0.9832 - val_loss: 0.0897 - val_accuracy: 0.9635\n",
            "Epoch 10/20\n",
            "54/54 [==============================] - 3s 65ms/step - loss: 0.0876 - accuracy: 0.9693 - val_loss: 0.0319 - val_accuracy: 0.9948\n",
            "Epoch 11/20\n",
            "54/54 [==============================] - 3s 64ms/step - loss: 0.0856 - accuracy: 0.9676 - val_loss: 0.0326 - val_accuracy: 0.9792\n",
            "Epoch 12/20\n",
            "54/54 [==============================] - 3s 64ms/step - loss: 0.0634 - accuracy: 0.9797 - val_loss: 0.0369 - val_accuracy: 0.9896\n",
            "Epoch 13/20\n",
            "54/54 [==============================] - 3s 64ms/step - loss: 0.0586 - accuracy: 0.9792 - val_loss: 0.0379 - val_accuracy: 0.9844\n",
            "Epoch 14/20\n",
            "54/54 [==============================] - 3s 64ms/step - loss: 0.0470 - accuracy: 0.9832 - val_loss: 0.0237 - val_accuracy: 0.9844\n",
            "Epoch 15/20\n",
            "54/54 [==============================] - 3s 64ms/step - loss: 0.0554 - accuracy: 0.9769 - val_loss: 0.0257 - val_accuracy: 0.9896\n",
            "Epoch 16/20\n",
            "54/54 [==============================] - 3s 64ms/step - loss: 0.0496 - accuracy: 0.9792 - val_loss: 0.0247 - val_accuracy: 0.9896\n",
            "Epoch 17/20\n",
            "54/54 [==============================] - 3s 64ms/step - loss: 0.0341 - accuracy: 0.9896 - val_loss: 0.0189 - val_accuracy: 0.9948\n",
            "Epoch 18/20\n",
            "54/54 [==============================] - 3s 64ms/step - loss: 0.0623 - accuracy: 0.9792 - val_loss: 0.0278 - val_accuracy: 0.9948\n",
            "Epoch 19/20\n",
            "54/54 [==============================] - 3s 64ms/step - loss: 0.0473 - accuracy: 0.9844 - val_loss: 0.0347 - val_accuracy: 0.9792\n",
            "Epoch 20/20\n",
            "54/54 [==============================] - 3s 64ms/step - loss: 0.0300 - accuracy: 0.9884 - val_loss: 0.0183 - val_accuracy: 0.9948\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Save Model:"
      ],
      "metadata": {
        "id": "HhH2bP-RQbT8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.save('model.h5')"
      ],
      "metadata": {
        "id": "5b1Za-TsQapp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Evaluate Model:"
      ],
      "metadata": {
        "id": "_5O3U0g-Oxwg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.evaluate(test_ds)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lZtjPkcWEW10",
        "outputId": "e5d8e3ba-3519-41da-da01-0875b1fd15be"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8/8 [==============================] - 1s 67ms/step - loss: 0.0294 - accuracy: 0.9883\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.02940945513546467, 0.98828125]"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pred_prob = np.max(model.predict(test_ds), axis=1)"
      ],
      "metadata": {
        "id": "kOlV0zhhPJ6h"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pred_labels = np.argmax(model.predict(test_ds), axis=1)\n",
        "pred_labels[:9]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vazuZnJ1ORjf",
        "outputId": "4913d17d-4518-4143-d2b4-a30c97ea6c0c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 1, 1, 1, 0, 0, 1, 2])"
            ]
          },
          "metadata": {},
          "execution_count": 119
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Visualize Loss, Accuracy Graphs and Prediction:"
      ],
      "metadata": {
        "id": "4k6p24VaRQtF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pd.DataFrame(history.history)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 676
        },
        "id": "y7I6r3WXUcHk",
        "outputId": "cedbeca8-a492-42c9-e493-8d4e7ecee23b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        loss  accuracy  val_loss  val_accuracy\n",
              "0   1.036735  0.717593  0.229622      0.916667\n",
              "1   0.232931  0.910880  0.149867      0.937500\n",
              "2   0.167718  0.935764  0.178242      0.932292\n",
              "3   0.145776  0.948495  0.079442      0.973958\n",
              "4   0.115841  0.960648  0.049003      0.984375\n",
              "5   0.103025  0.963542  0.054100      0.984375\n",
              "6   0.072995  0.973958  0.050965      0.984375\n",
              "7   0.058744  0.981481  0.045268      0.984375\n",
              "8   0.052200  0.983218  0.089671      0.963542\n",
              "9   0.087617  0.969329  0.031855      0.994792\n",
              "10  0.085597  0.967593  0.032649      0.979167\n",
              "11  0.063449  0.979745  0.036892      0.989583\n",
              "12  0.058620  0.979167  0.037911      0.984375\n",
              "13  0.047010  0.983218  0.023744      0.984375\n",
              "14  0.055432  0.976852  0.025733      0.989583\n",
              "15  0.049588  0.979167  0.024690      0.989583\n",
              "16  0.034108  0.989583  0.018922      0.994792\n",
              "17  0.062287  0.979167  0.027771      0.994792\n",
              "18  0.047339  0.984375  0.034652      0.979167\n",
              "19  0.030030  0.988426  0.018298      0.994792"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a9ed6663-bd3d-49c4-9d96-b276a65e9389\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>loss</th>\n",
              "      <th>accuracy</th>\n",
              "      <th>val_loss</th>\n",
              "      <th>val_accuracy</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.036735</td>\n",
              "      <td>0.717593</td>\n",
              "      <td>0.229622</td>\n",
              "      <td>0.916667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.232931</td>\n",
              "      <td>0.910880</td>\n",
              "      <td>0.149867</td>\n",
              "      <td>0.937500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.167718</td>\n",
              "      <td>0.935764</td>\n",
              "      <td>0.178242</td>\n",
              "      <td>0.932292</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.145776</td>\n",
              "      <td>0.948495</td>\n",
              "      <td>0.079442</td>\n",
              "      <td>0.973958</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.115841</td>\n",
              "      <td>0.960648</td>\n",
              "      <td>0.049003</td>\n",
              "      <td>0.984375</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0.103025</td>\n",
              "      <td>0.963542</td>\n",
              "      <td>0.054100</td>\n",
              "      <td>0.984375</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0.072995</td>\n",
              "      <td>0.973958</td>\n",
              "      <td>0.050965</td>\n",
              "      <td>0.984375</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0.058744</td>\n",
              "      <td>0.981481</td>\n",
              "      <td>0.045268</td>\n",
              "      <td>0.984375</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.052200</td>\n",
              "      <td>0.983218</td>\n",
              "      <td>0.089671</td>\n",
              "      <td>0.963542</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.087617</td>\n",
              "      <td>0.969329</td>\n",
              "      <td>0.031855</td>\n",
              "      <td>0.994792</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>0.085597</td>\n",
              "      <td>0.967593</td>\n",
              "      <td>0.032649</td>\n",
              "      <td>0.979167</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>0.063449</td>\n",
              "      <td>0.979745</td>\n",
              "      <td>0.036892</td>\n",
              "      <td>0.989583</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>0.058620</td>\n",
              "      <td>0.979167</td>\n",
              "      <td>0.037911</td>\n",
              "      <td>0.984375</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>0.047010</td>\n",
              "      <td>0.983218</td>\n",
              "      <td>0.023744</td>\n",
              "      <td>0.984375</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0.055432</td>\n",
              "      <td>0.976852</td>\n",
              "      <td>0.025733</td>\n",
              "      <td>0.989583</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>0.049588</td>\n",
              "      <td>0.979167</td>\n",
              "      <td>0.024690</td>\n",
              "      <td>0.989583</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>0.034108</td>\n",
              "      <td>0.989583</td>\n",
              "      <td>0.018922</td>\n",
              "      <td>0.994792</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>0.062287</td>\n",
              "      <td>0.979167</td>\n",
              "      <td>0.027771</td>\n",
              "      <td>0.994792</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>0.047339</td>\n",
              "      <td>0.984375</td>\n",
              "      <td>0.034652</td>\n",
              "      <td>0.979167</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>0.030030</td>\n",
              "      <td>0.988426</td>\n",
              "      <td>0.018298</td>\n",
              "      <td>0.994792</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a9ed6663-bd3d-49c4-9d96-b276a65e9389')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a9ed6663-bd3d-49c4-9d96-b276a65e9389 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a9ed6663-bd3d-49c4-9d96-b276a65e9389');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 132
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.DataFrame(history.history).plot()"
      ],
      "metadata": {
        "id": "Y5ITijnWUu4p"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%pprint"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7WzxitKGSQvx",
        "outputId": "74768e54-e64f-4b78-9e7c-015edf274ba2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Pretty printing has been turned OFF\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "labels = []\n",
        "for image, label in test_ds.unbatch():\n",
        "  labels.append(label.numpy())\n",
        "labels[:10]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m8g_4BktR7w7",
        "outputId": "30042e9e-8882-4494-9645-d90116ec30be"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0, 1, 1, 1, 1, 0, 0, 1, 2, 1]"
            ]
          },
          "metadata": {},
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "images = []\n",
        "for image, label in test_ds.unbatch():\n",
        "  images.append(image.numpy())"
      ],
      "metadata": {
        "id": "z4pojlPbSbLh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fig , axs = plt.subplots(3,3,figsize=(10,10))\n",
        "\n",
        "for  i, ax in enumerate(axs.flatten()):\n",
        "  ax.imshow(images[i]/255)\n",
        "  itemname = classes[labels[i]]\n",
        "  predname = classes[pred_labels[i]]\n",
        "  prob = pred_prob[i]\n",
        "  ax.text(50, -3, f'actual:{itemname}\\npredicted:{predname}\\nprobability:{prob:.3f}', fontsize=10 ,backgroundcolor='yellow')\n",
        "  ax.set_xticks([])\n",
        "  ax.set_yticks([]);"
      ],
      "metadata": {
        "id": "fHXpqNDMO5wN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Confusion Matrix:"
      ],
      "metadata": {
        "id": "JqnPQqzbTZU-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cm = confusion_matrix(labels, pred_labels)\n",
        "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=classes)"
      ],
      "metadata": {
        "id": "9xGuHcsePvBz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fig, ax = plt.subplots(figsize=(5,5))\n",
        "disp.plot(cmap=plt.cm.Blues, xticks_rotation='vertical', ax= ax);"
      ],
      "metadata": {
        "id": "pA3yqZHTTBuv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(labels, pred_labels))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QBxqkBWrTN6w",
        "outputId": "2b70a303-32fd-4e8c-d6a1-25e3e33d0c07"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.99      1.00      1.00       124\n",
            "           1       1.00      0.97      0.99       113\n",
            "           2       0.90      1.00      0.95        19\n",
            "\n",
            "    accuracy                           0.99       256\n",
            "   macro avg       0.97      0.99      0.98       256\n",
            "weighted avg       0.99      0.99      0.99       256\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "8HCkM0vUTVAG"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
